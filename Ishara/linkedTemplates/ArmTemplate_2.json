{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Ishara"
		},
		"AzureSqlDatabaseCustomer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseCustomer'"
		},
		"order_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'order'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/csvcustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "customersorce",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet - Dim_Customer.csv",
						"folderPath": "input",
						"container": "datafactory"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Customer_Id",
						"type": "String"
					},
					{
						"name": "Customer_SK",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvdataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet.csv",
						"container": "dwm-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Customer",
						"type": "String"
					},
					{
						"name": "Season",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Product Type",
						"type": "String"
					},
					{
						"name": "Style Code",
						"type": "String"
					},
					{
						"name": "Development Type",
						"type": "String"
					},
					{
						"name": "Sizes",
						"type": "String"
					},
					{
						"name": "Active",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Order Received Date",
						"type": "String"
					},
					{
						"name": "Responsible Person",
						"type": "String"
					},
					{
						"name": "Order Modified Date",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvjunk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "junkblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet - Dim_Junk.csv",
						"folderPath": "input",
						"container": "datafactory"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Status_SK",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "orderblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet - Fact_Order.csv",
						"folderPath": "input",
						"container": "datafactory"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order_ID",
						"type": "String"
					},
					{
						"name": "Product_ID",
						"type": "String"
					},
					{
						"name": "Customer_ID",
						"type": "String"
					},
					{
						"name": "Order_Date",
						"type": "String"
					},
					{
						"name": "Suppliers_ID",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Unit cost (USD)",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvproduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "productblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet - Dim_Product.csv",
						"folderPath": "input",
						"container": "datafactory"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Product_ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Fabric_Type",
						"type": "String"
					},
					{
						"name": "Size_Range",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Unit_Cost($)",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvsupplier')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "suppplierblobstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DataSet - Dim_Supplier.csv",
						"folderPath": "input",
						"container": "datafactory"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Supplier_SK",
						"type": "String"
					},
					{
						"name": "Supplier_Code",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseCustomer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseCustomer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('order_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureOrderFactSqlTableNew')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCustomer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Order_Id",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Unit_Cost",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "Product_ID",
						"type": "nvarchar"
					},
					{
						"name": "Customer_ID",
						"type": "nvarchar"
					},
					{
						"name": "Supplier_ID",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "Order_Date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OrderFact"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseCustomer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggragatefactdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderFact",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAggragateFact",
								"type": "DatasetReference"
							},
							"name": "aggragatefactsink"
						}
					],
					"transformations": [
						{
							"name": "aggregatefactstream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Order_Id as string,",
						"          Quantity as integer,",
						"          Unit_Cost as decimal(10,2),",
						"          Product_ID as string,",
						"          Customer_ID as string,",
						"          Supplier_ID as string,",
						"          Status as string,",
						"          Order_Date as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 9,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(Order_Id),",
						"     Total = sum(Quantity*Unit_Cost)) ~> aggregatefactstream",
						"aggregatefactstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Order_Id as string,",
						"          Customer_Id as string,",
						"          Total_USD as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> aggragatefactsink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/junkdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlJunk",
								"type": "DatasetReference"
							},
							"name": "sourceJunk"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlSinkJunkTable",
								"type": "DatasetReference"
							},
							"name": "Junksink"
						}
					],
					"transformations": [
						{
							"name": "JunkSKStream"
						},
						{
							"name": "selectStatus"
						},
						{
							"name": "TrimStatusColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Status_SK as string,",
						"          Order_Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceJunk",
						"selectStatus keyGenerate(output(JunkData_SK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> JunkSKStream",
						"sourceJunk select(mapColumn(",
						"          Order_Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStatus",
						"JunkSKStream derive(Order_Status = trim(Order_Status)) ~> TrimStatusColumn",
						"TrimStatusColumn sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          Status_SK as integer,",
						"          Order_Status as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Status_SK = JunkData_SK,",
						"          Order_Status",
						"     )) ~> Junksink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/orderfactdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderFact",
								"type": "DatasetReference"
							},
							"name": "sourceOrder"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableCustomer",
								"type": "DatasetReference"
							},
							"name": "sourcecustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableProduct",
								"type": "DatasetReference"
							},
							"name": "sourceproduct"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlSinkJunkTable",
								"type": "DatasetReference"
							},
							"name": "sourcejunk"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableSuliper",
								"type": "DatasetReference"
							},
							"name": "sourcesupplier"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlDate",
								"type": "DatasetReference"
							},
							"name": "sourcedate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSinkOrderFact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookupcustomerSK"
						},
						{
							"name": "selectCusSK"
						},
						{
							"name": "lookupproductSK"
						},
						{
							"name": "selectProdSK"
						},
						{
							"name": "lookupjunkSK"
						},
						{
							"name": "select3"
						},
						{
							"name": "lookupsupplierSK"
						},
						{
							"name": "select4"
						},
						{
							"name": "lookupdate"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Order_Id as string,",
						"          Quantity as integer,",
						"          Unit_Cost as decimal(10,2),",
						"          Product_ID as string,",
						"          Customer_ID as string,",
						"          Supplier_ID as string,",
						"          Status as string,",
						"          Order_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceOrder",
						"source(output(",
						"          Customer_SK as integer,",
						"          Customer_ID as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcecustomer",
						"source(output(",
						"          Product_SK as integer,",
						"          Product_Id as string,",
						"          Name as string,",
						"          Fabric_Type as string,",
						"          Size_Range as string,",
						"          Color as string,",
						"          Category as string,",
						"          Unit_Cost as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceproduct",
						"source(output(",
						"          Status_SK as integer,",
						"          Order_Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcejunk",
						"source(output(",
						"          Supplier_SK as integer,",
						"          Supplier_Code as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcesupplier",
						"source(output(",
						"          SurrogateKey_Date as integer,",
						"          Year as integer,",
						"          Month as integer,",
						"          Date as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcedate",
						"sourceOrder, sourcecustomer lookup(sourceOrder@Customer_ID == sourcecustomer@Customer_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookupcustomerSK",
						"lookupcustomerSK select(mapColumn(",
						"          Order_Id,",
						"          Quantity,",
						"          Unit_Cost,",
						"          Product_ID,",
						"          Customer_SK,",
						"          Supplier_ID,",
						"          Status,",
						"          Order_Date,",
						"          Customer_SK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCusSK",
						"selectCusSK, sourceproduct lookup(selectCusSK@Product_ID == sourceproduct@Product_Id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupproductSK",
						"lookupproductSK select(mapColumn(",
						"          Order_Id,",
						"          Quantity,",
						"          Unit_Cost = selectCusSK@Unit_Cost,",
						"          Customer_SK,",
						"          Supplier_ID,",
						"          Status,",
						"          Order_Date,",
						"          Product_SK,",
						"          Unit_Cost = sourceproduct@Unit_Cost",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProdSK",
						"selectProdSK, sourcejunk lookup(Status == Order_Status,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupjunkSK",
						"lookupjunkSK select(mapColumn(",
						"          Order_Id,",
						"          Quantity,",
						"          Unit_Cost,",
						"          Customer_SK,",
						"          Supplier_ID,",
						"          Order_Date,",
						"          Product_SK,",
						"          Status_SK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3, sourcesupplier lookup(Supplier_ID == Supplier_Code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupsupplierSK",
						"lookupsupplierSK select(mapColumn(",
						"          Order_Id,",
						"          Quantity,",
						"          Unit_Cost,",
						"          Customer_SK,",
						"          Order_Date,",
						"          Product_SK,",
						"          Status_SK,",
						"          Supplier_SK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn1, sourcedate lookup(Order_Date == SurrogateKey_Date,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdate",
						"select4 derive(Order_Date = toInteger(replace(toString(Order_Date, 'yyyyMMdd'), '-', ''))) ~> derivedColumn1",
						"lookupdate select(mapColumn(",
						"          Order_Id,",
						"          Quantity,",
						"          Unit_Cost,",
						"          Customer_SK,",
						"          Product_SK,",
						"          Status_SK,",
						"          Supplier_SK,",
						"          Order_Date_SK = SurrogateKey_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Order_Id as string,",
						"          Product_SK as integer,",
						"          Customer_SK as integer,",
						"          Order_Date_SK as integer,",
						"          Suppliers_SK as integer,",
						"          Status_SK as integer,",
						"          Quantity as integer,",
						"          Unit_Cost as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Order_Id,",
						"          Product_SK,",
						"          Customer_SK,",
						"          Order_Date_SK,",
						"          Suppliers_SK = Supplier_SK,",
						"          Status_SK,",
						"          Quantity,",
						"          Unit_Cost",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableProduct",
								"type": "DatasetReference"
							},
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "ProductSKStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Product_Id as string,",
						"          Name as string,",
						"          Fabric_Type as string,",
						"          Size_Range as string,",
						"          Color as string,",
						"          Category as string,",
						"          Unit_Cost as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 keyGenerate(output(Product_SK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSKStream",
						"ProductSKStream sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          Product_SK as integer,",
						"          Product_Id as string,",
						"          Name as string,",
						"          Fabric_Type as string,",
						"          Size_Range as string,",
						"          Color as string,",
						"          Category as string,",
						"          Unit_Cost as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_SK,",
						"          Product_Id,",
						"          Name,",
						"          Fabric_Type,",
						"          Size_Range,",
						"          Color,",
						"          Category,",
						"          Unit_Cost",
						"     )) ~> ProductSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/supplierdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataflowtest1",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSupplier",
								"type": "DatasetReference"
							},
							"name": "source",
							"description": "Import data from AzureSqlTableSupplier"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableSuliper",
								"type": "DatasetReference"
							},
							"name": "SupplierSink"
						}
					],
					"transformations": [
						{
							"name": "SupplierSKStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Supplier_Code as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source",
						"source keyGenerate(output(Supplier_SK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SupplierSKStream",
						"SupplierSKStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Supplier_SK as integer,",
						"          Supplier_Code as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Supplier_SK,",
						"          Supplier_Code,",
						"          Name,",
						"          Region,",
						"          Country,",
						"          Type",
						"     )) ~> SupplierSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlCustomer",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlSinkTableCustomer",
								"type": "DatasetReference"
							},
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "CustomerSKStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Customer_Id as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 keyGenerate(output(Customer_SK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> CustomerSKStream",
						"CustomerSKStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Customer_SK as integer,",
						"          Customer_ID as string,",
						"          Name as string,",
						"          Region as string,",
						"          Country as string,",
						"          Type as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Customer_SK,",
						"          Customer_ID = Customer_Id,",
						"          Name,",
						"          Region,",
						"          Country,",
						"          Type",
						"     )) ~> CustomerSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/workingpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customerdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Customer_SK",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer_Id",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvcustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlCustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "supplierdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Supplier_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Supplier_Code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvsupplier",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableSupplier",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "junkdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Status_SK",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status_SK",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status"
										},
										"sink": {
											"name": "Order_Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvjunk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlJunk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "productdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Product_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Fabric_Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fabric_Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Size_Range",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Size_Range",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Color",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Color",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Category",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Unit_Cost($)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Cost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 10
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvproduct",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Supplier Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "supplierdata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "supplierdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"SupplierSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Customer Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "customerdata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "customerdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"CustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Product Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "productdata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "productdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Junk Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "junkdata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "junkdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceJunk": {},
									"Junksink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "orderdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Order_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order_Id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Unit cost (USD)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Unit_Cost",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "Product_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Customer_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Suppliers_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Supplier_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Order_Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Order_Date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvorder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableOrderFact",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Order Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "orderdata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "orderfactdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceOrder": {},
									"sourcecustomer": {},
									"sourceproduct": {},
									"sourcejunk": {},
									"sourcesupplier": {},
									"sourcedate": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvcustomer')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlCustomer')]",
				"[concat(variables('factoryId'), '/datasets/csvsupplier')]",
				"[concat(variables('factoryId'), '/datasets/csvjunk')]",
				"[concat(variables('factoryId'), '/datasets/csvproduct')]",
				"[concat(variables('factoryId'), '/dataflows/supplierdataflow')]",
				"[concat(variables('factoryId'), '/dataflows/customerdataflow')]",
				"[concat(variables('factoryId'), '/dataflows/productdataflow')]",
				"[concat(variables('factoryId'), '/dataflows/junkdataflow')]",
				"[concat(variables('factoryId'), '/datasets/csvorder')]",
				"[concat(variables('factoryId'), '/dataflows/orderfactdataflow')]"
			]
		}
	]
}