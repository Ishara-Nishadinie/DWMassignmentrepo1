{
	"name": "orderfactdataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableOrderFact",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlSinkTableCustomer",
						"type": "DatasetReference"
					},
					"name": "sourcecustomer"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlSinkTableProduct",
						"type": "DatasetReference"
					},
					"name": "sourceproduct"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlSinkJunkTable",
						"type": "DatasetReference"
					},
					"name": "sourcejunk"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookupcustomerSK"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookupproductSK"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookupjunkSK"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Order_Id as string,",
				"          Quantity as integer,",
				"          Unit_Cost as decimal(10,2),",
				"          Product_ID as string,",
				"          Customer_ID as string,",
				"          Supplier_ID as string,",
				"          Status as string,",
				"          Order_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Customer_SK as integer,",
				"          Customer_ID as string,",
				"          Name as string,",
				"          Region as string,",
				"          Country as string,",
				"          Type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcecustomer",
				"source(output(",
				"          Product_SK as integer,",
				"          Product_Id as string,",
				"          Name as string,",
				"          Fabric_Type as string,",
				"          Size_Range as string,",
				"          Color as string,",
				"          Category as string,",
				"          Unit_Cost as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceproduct",
				"source(output(",
				"          Status_SK as integer,",
				"          Order_Status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcejunk",
				"source1, sourcecustomer lookup(source1@Customer_ID == sourcecustomer@Customer_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupcustomerSK",
				"lookupcustomerSK select(mapColumn(",
				"          Order_Id,",
				"          Quantity,",
				"          Unit_Cost,",
				"          Product_ID,",
				"          Customer_SK,",
				"          Supplier_ID,",
				"          Status,",
				"          Order_Date,",
				"          Customer_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, sourceproduct lookup(select1@Product_ID == sourceproduct@Product_Id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupproductSK",
				"lookupproductSK select(mapColumn(",
				"          Order_Id,",
				"          Quantity,",
				"          Unit_Cost = select1@Unit_Cost,",
				"          Customer_SK,",
				"          Supplier_ID,",
				"          Status,",
				"          Order_Date,",
				"          Product_SK,",
				"          Unit_Cost = sourceproduct@Unit_Cost",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, sourcejunk lookup(Status == Order_Status,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupjunkSK",
				"lookupjunkSK sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}